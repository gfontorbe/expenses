/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, isAstNode } from 'langium';

export interface Expense extends AstNode {
    readonly $container: Model;
    amount: number
    paymentDate: string
    tag: string
}

export const Expense = 'Expense';

export function isExpense(item: unknown): item is Expense {
    return reflection.isInstance(item, Expense);
}

export interface Income extends AstNode {
    readonly $container: Model;
    amount: number
    paymentDate: string
    tag: string
}

export const Income = 'Income';

export function isIncome(item: unknown): item is Income {
    return reflection.isInstance(item, Income);
}

export interface Model extends AstNode {
    expenses: Array<Expense>
    incomes: Array<Income>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export type ExpensesDslAstType = 'Expense' | 'Income' | 'Model';

export type ExpensesDslAstReference = never;

export class ExpensesDslAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Expense', 'Income', 'Model'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: ExpensesDslAstReference): string {
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new ExpensesDslAstReflection();
